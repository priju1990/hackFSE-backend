package com.hacker.mail;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Optional;
import java.util.logging.Logger;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Query;
import javax.servlet.http.HttpServletResponse;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.apache.poi.EncryptedDocumentException;
import org.apache.poi.ss.usermodel.DataFormatter;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.http.ResponseEntity.BodyBuilder;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller
@CrossOrigin(origins = "*", allowedHeaders="*", maxAge = 3600)
public class AdminController  { 
	@Autowired
	private AdminRepository adminRepository;
	@Autowired
	private EventRepository eventRepo;
	@Autowired
	EntityManagerFactory emf ;
	 private static final String signingKey = "signingKey";
	 private static final String jwtTokenCookieName = "JWT-TOKEN";
	static Logger logger = Logger.getLogger(AdminController.class.getName());
		@RequestMapping(value="/createRole", method = RequestMethod.POST, consumes=MediaType.APPLICATION_JSON_VALUE)
	public  ResponseEntity<String> createUser(@RequestBody Admin role) throws EncryptedDocumentException, IOException {

		Admin admin = new Admin();

		admin.setEmpID(role.empID);
		admin.setName(role.name);
		admin.setPhoneNum(role.phoneNum);
		admin.setRole(role.role);
		admin.setPwd(Integer.toString(role.empID)+"@cts");
		//admin.setEventid(role.eventid);

		System.out.println("COming to springg"+admin.phoneNum);
		try {
			boolean result=	adminRepository.existsById(role.empID);
			if(result) {
				System.out.println("Already exists");
				return ResponseEntity.status(409).build() ;

			}
			else {

				admin= adminRepository.save(admin);
			}

		}
		catch(DataIntegrityViolationException  e) {
			System.out.println("Already exists");
			return ResponseEntity.status(409).build() ;
		}
		catch(Exception ex) {
			return ResponseEntity.status(500).build() ;
		}
		return ResponseEntity.ok().build();
	}

	
	@RequestMapping(value="/loadRoles")
		public ResponseEntity<String> loadRoles()  {

		Workbook workbook;
		Sheet sheet = null;
		String SAMPLE_XLSX_FILE_PATH = "/Admin List.xlsx";

		try { 
			InputStream file = getClass().getResourceAsStream(SAMPLE_XLSX_FILE_PATH);
		workbook = WorkbookFactory.create(file);
		 sheet = workbook.getSheetAt(0);}
		catch(IOException ex) {
			logger.info("Excel not found");
			return ResponseEntity.status(500).build() ;
		}
		catch(EncryptedDocumentException e) {
			logger.info("Document is corrupted");
			return ResponseEntity.status(500).build() ;
		}
		catch(Exception e) {
			logger.info("Something went wrong");
			return ResponseEntity.status(500).build() ;
		}
		// Create a DataFormatter to format and get each cell's value as String
		DataFormatter dataFormatter = new DataFormatter();
		// 2. Or you can use a for-each loop to iterate over the rows and columns
		logger.info("\n\nIterating over Rows and Columns using for-each loop\n");
		for (Row row: sheet) { 
			if(0!= row.getRowNum()){
			Admin admin = new Admin();
			admin.setEmpID(Integer.parseInt(dataFormatter.formatCellValue(row.getCell(0))));
			admin.setName(dataFormatter.formatCellValue(row.getCell(1)));
			admin.setPhoneNum(Integer.parseInt(dataFormatter.formatCellValue(row.getCell(3))));
			admin.setRole(dataFormatter.formatCellValue(row.getCell(2)));
			admin.setPwd(dataFormatter.formatCellValue(row.getCell(0))+"@cts");
			
			try {
				boolean result=adminRepository.existsById(Integer.parseInt(dataFormatter.formatCellValue(row.getCell(0))));
				if(result) {
					System.out.println("Already exists");
					logger.info(admin.empID+" already existing");
					//return ResponseEntity.status(409).build() ;
					
				}
				else {
					
					admin= adminRepository.save(admin);
					logger.info(admin.empID+" Created");
				}
				
				}
				catch(DataIntegrityViolationException  e) {
					logger.info(admin.empID+" already existing");
					return ResponseEntity.status(409).build() ;
				}
				catch(Exception ex) {
					logger.info(ex.getMessage());
					return ResponseEntity.status(500).build() ;
				}

			}
		}
		return ResponseEntity.ok().build();

	}

	
	@RequestMapping(value="/createEvent", method = RequestMethod.POST, consumes=MediaType.APPLICATION_JSON_VALUE)
		public ResponseEntity<String> createEvent(@RequestBody Event event) {

		Event e = new Event();
		e.setID(event.ID);
		e.setName(event.name);
		e.setCity(event.city);
		e.setCountry(event.country);
		e.setMonth(event.month);
		e.setPoc(event.poc);
		try {
			e= eventRepo.save(e);
			logger.info(event.ID+" Created");
		
		}
		catch(Exception ex) {
			logger.info("Some exception occured"+ ex.getMessage());
			return ResponseEntity.status(500).build() ;
		}
		
		
		return ResponseEntity.ok().build();
	}
	
	@RequestMapping(value="/loadEvents")
		public ResponseEntity<String> loadEvents(){

		Workbook workbook;
		Sheet sheet=null;
		String SAMPLE_XLSX_FILE_PATH = "/Outreach Event Summary.xlsx";
		try {
			InputStream file = getClass().getResourceAsStream(SAMPLE_XLSX_FILE_PATH);
		 workbook = WorkbookFactory.create(file);

		 sheet = workbook.getSheetAt(0);
		}
		catch(IOException ex) {
			logger.info("Excel not found");
			return ResponseEntity.status(500).build() ;
		}
		catch(EncryptedDocumentException e) {
			logger.info("Document is corrupted");
			return ResponseEntity.status(500).build() ;
		}
		catch(Exception e) {
			System.out.println(e.getMessage());
			logger.info("Something went wrong");
			return ResponseEntity.status(500).build() ;
		}
		// Create a DataFormatter to format and get each cell's value as String
		DataFormatter dataFormatter = new DataFormatter();
		// 2. Or you can use a for-each loop to iterate over the rows and columns
		System.out.println("\n\nIterating over Rows and Columns using for-each loop\n");
		for (Row row: sheet) { 
			if(0!= row.getRowNum())
			{  Event e = new Event();
			try {
				e.setID(dataFormatter.formatCellValue(row.getCell(0)));
				e.setName( dataFormatter.formatCellValue(row.getCell(8)));
				e.setCity( dataFormatter.formatCellValue(row.getCell(2)));
				e.setCountry( dataFormatter.formatCellValue(row.getCell(4)));
				e.setMonth( new SimpleDateFormat("dd-mm-yyyy").parse(dataFormatter.formatCellValue(row.getCell(10))));
				e.setPoc(  Integer.parseInt(dataFormatter.formatCellValue(row.getCell(18))));
			}
			catch(Exception ex) {
				logger.info("Some exception occured"+ ex.getMessage());
				return ResponseEntity.status(500).build() ;
			}
			eventRepo.save(e); }}
		return ResponseEntity.ok().build();
	}


	
	@RequestMapping(value="/login", method = RequestMethod.GET)
		public @ResponseBody ResponseEntity<String> login(@RequestParam("empID") long empID, @RequestParam("pwd") String pwd ,HttpServletResponse httpServletResponse) {
		EntityManager entityManager = emf.createEntityManager();
		Cookie cookie= null;
		System.out.println("Login service");
		entityManager.getTransaction().begin();
		List <String> role  =entityManager.createQuery("SELECT role FROM Admin where empID="+empID+" and pwd="+"'"+pwd+"'").getResultList();
		if(role!=null) {
		// EntityManagerFactory emfactory = Persistence.createEntityManagerFactory( "Eclipselink_JPA" );
		//jwt
		 String token = JWTUtil.generateToken(signingKey, empID);
	        cookie= CookieUtil.create(httpServletResponse, jwtTokenCookieName, token, false, -1, "localhost");
	       
		}
		httpServletResponse.addCookie(cookie);
	    return new ResponseEntity<String>(HttpStatus.OK); 

		
	

	//	entityManager.getTransaction().commit();
		//entityManager.close();
		//return role ;
	}

	//change pwd 
	
	@RequestMapping(value="/changePwd", method = RequestMethod.POST)
		public @ResponseBody int changePwd(@RequestParam("empID") int empID, @RequestParam("pwd") String pwd ,@RequestParam ("newPwd") String newPwd) {
		EntityManager entityManager = emf.createEntityManager();


		// EntityManagerFactory emfactory = Persistence.createEntityManagerFactory( "Eclipselink_JPA" );

		entityManager.getTransaction().begin();

		Query query = entityManager.createQuery("update Admin set pwd=:newPwd where empID=:empID and pwd=:pwd");
		query.setParameter("pwd", pwd);
		query.setParameter("empID", empID);
		query.setParameter("newPwd", newPwd);
		int rowsUpdated = query.executeUpdate();
		entityManager.getTransaction().commit();
		entityManager.close();

		return rowsUpdated ;
	}
	
	@RequestMapping(value="/getEvents", method = RequestMethod.GET)
	public @ResponseBody ArrayList eventList(@RequestParam("empID") long empID) {
		EntityManager entityManager = emf.createEntityManager();


		// EntityManagerFactory emfactory = Persistence.createEntityManagerFactory( "Eclipselink_JPA" );

		entityManager.getTransaction().begin();

		ArrayList result  =  (ArrayList)entityManager.createQuery("SELECT id,name FROM Event where poc="+empID).getResultList();


		entityManager.getTransaction().commit();
		entityManager.close();
		return result ;
	}


}
