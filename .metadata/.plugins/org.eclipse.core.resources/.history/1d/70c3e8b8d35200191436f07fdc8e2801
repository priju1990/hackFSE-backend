package com.hacker.mail;



import javax.sql.DataSource;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.boot.jdbc.DataSourceBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.builders.WebSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;

@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {
	Logger logger = LoggerFactory.getLogger(this.getClass());

	@Autowired
	SuccessHandler successHandler;

	@Autowired
	DataSource datasource;
	@ConfigurationProperties("spring.datasource")
	public DataSource ds() {

		return DataSourceBuilder.create().build();

	}
	@Bean
	public CorsConfigurationSource corsConfigurationSource() {
		CorsConfiguration config = new CorsConfiguration();
		config.setAllowCredentials(true);
		config.addAllowedOrigin("*");
		config.addAllowedHeader("*");
		config.addAllowedMethod("*");
		UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
		source.registerCorsConfiguration("/**", config);
		return source;     
	}

	

	@Override
	protected void configure(HttpSecurity http) throws Exception {
	logger.info("************* Entry configure ************* ");
		http
		.cors()
		.and()
		.csrf().disable()
		.authorizeRequests().antMatchers("/getFeedbackByMonth/**").hasAuthority("Admin").and()
		.authorizeRequests().antMatchers("/getFeedbackDetailsForEvent/**").hasAuthority("Admin").and()
		.formLogin().loginProcessingUrl("/login").successHandler(successHandler)
		.and().logout().invalidateHttpSession(true)
		.clearAuthentication(true).deleteCookies("SESSION");

	}

	@Autowired
	public void configureGlobal(AuthenticationManagerBuilder auth)
			throws Exception
	{
logger.info("************* Entry configureGlobal ************* ");
	auth.jdbcAuthentication().dataSource(datasource).authoritiesByUsernameQuery("SELECT empID, 'Admin' FROM ADMIN WHERE empID=?")
		.usersByUsernameQuery("SELECT empID, pwd FROM ADMIN WHERE empID=?");
		logger.info("************* Exit configureGlobal ************* ");
	}

	@Bean
	public PasswordEncoder passwordEncoder() {

		return new MyPasswordEncoder();

	}







}
